function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

var V3_URL = 'https://js.stripe.com/v3';

var injectScript = function injectScript() {
  var script = document.createElement('script');
  script.src = V3_URL;
  var headOrBody = document.head || document.body;

  if (!headOrBody) {
    throw new Error('Expected document.body not to be null. Stripe.js requires a <body> element.');
  }

  headOrBody.appendChild(script);
  return script;
};

var registerWrapper = function registerWrapper(stripe) {
  if (!stripe || !stripe._registerWrapper) {
    return;
  }

  stripe._registerWrapper({
    name: 'stripe-js',
    version: "1.3.2"
  });
};

var stripePromise = null;
var loadScript = function loadScript() {
  // Ensure that we only attempt to load Stripe.js at most once
  if (stripePromise !== null) {
    return stripePromise;
  }

  stripePromise = new Promise(function (resolve, reject) {
    if (typeof window === 'undefined') {
      // Resolve to null when imported server side. This makes the module
      // safe to import in an isomorphic code base.
      resolve(null);
      return;
    }

    if (window.Stripe) {
      resolve(window.Stripe);
      return;
    }

    var script = document.querySelector("script[src=\"".concat(V3_URL, "\"], script[src=\"").concat(V3_URL, "/\"]")) || injectScript();
    script.addEventListener('load', function () {
      if (window.Stripe) {
        resolve(window.Stripe);
      } else {
        reject(new Error('Stripe.js not available'));
      }
    });
    script.addEventListener('error', function () {
      reject(new Error('Failed to load Stripe.js'));
    });
  });
  return stripePromise;
};
var initStripe = function initStripe(maybeStripe, args) {
  if (maybeStripe === null) {
    return null;
  }

  var stripe = maybeStripe.apply(void 0, _toConsumableArray(args));
  registerWrapper(stripe);
  return stripe;
};

// own script injection.

var stripePromise$1 = Promise.resolve().then(loadScript);
var loadCalled = false;
stripePromise$1["catch"](function (err) {
  if (!loadCalled) {
    console.warn(err);
  }
});
var loadStripe = function loadStripe() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  loadCalled = true;
  return stripePromise$1.then(function (maybeStripe) {
    return initStripe(maybeStripe, args);
  });
};

export { loadStripe };
